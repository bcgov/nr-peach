name: .Instance Deployer

on:
  workflow_call:
    inputs:
      command:
        description: 'The Terraform command to run'
        required: true
        type: string
        default: apply
      environment:
        description: 'The name of the environment to deploy to'
        required: false
        type: string
        default: test # TODO: Set default to dev when we have our real environments
      tag:
        description: 'The tag of the containers to deploy'
        required: false
        type: string
        default: latest

env:
  AZURE_REGION: Canada Central
  TF_LOG: ERROR

jobs:
  infra:
    name: ${{ inputs.environment }} ${{ inputs.command }}
    environment:
      name: ${{ inputs.environment }} # TODO: This should be set to dev or pr when we have our real environments
      url: ${{ steps.result.outputs.api_app_service_url }} # TODO: Check if this breaks when not populated
    permissions:
      contents: write # This is required for actions/checkout
      id-token: write # This is required for requesting the JWT
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Verify required GitHub secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          VNET_ADDRESS_SPACE: ${{ secrets.VNET_ADDRESS_SPACE }}
          VNET_RESOURCE_GROUP_NAME: ${{ secrets.VNET_RESOURCE_GROUP_NAME }}
          VNET_NAME: ${{ secrets.VNET_NAME }}
        run: |
          # Verify that all required secrets are set
          set -euo pipefail
          missing=0
          for secret in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID VNET_RESOURCE_GROUP_NAME VNET_ADDRESS_SPACE VNET_NAME; do
            if [ -z "${!secret}" ]; then
              echo "Missing required secret: $secret"
              missing=1
            fi
          done
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing. Failing workflow."
            exit 1
          fi
      - name: Detect instance
        id: instance
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine instance information
          set -euo pipefail
          if [[ ${{ github.run_attempt }} -gt 1 ]]; then
            echo "force_migration=true" >> $GITHUB_OUTPUT
          else
            echo "force_migration=false" >> $GITHUB_OUTPUT
          fi

          # Detect instance context
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pr_number="${{ github.event.pull_request.number }}"

            # In some rare cases the PR number may not be present yet, so try to wait and then backfill
            if [[ -z "$pr_number" ]]; then
              sleep 20
              pr_number=$(gh pr list --head "${{ github.ref_name }}" --state open --repo "${{ github.repository }}" --json number --jq '.[0].number')
            fi

            if [[ -n "$pr_number" ]]; then
              echo "instance=pr-$pr_number" >> $GITHUB_OUTPUT
              echo "key=pr/pr-$pr_number.instance.tfstate" >> $GITHUB_OUTPUT
              echo "Instance identified as pr-$pr_number"
            else
              echo "Unable to detect open PR for branch ${{ github.ref_name }}. Failing workflow."
              exit 1
            fi
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "instance=main" >> $GITHUB_OUTPUT
            echo "key=main.instance.tfstate" >> $GITHUB_OUTPUT
            echo "Instance identified as main"
          else
            echo "Unable to determine instance information. Failing workflow."
            exit 1
          fi
      - name: Azure CLI login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      - name: Cache Terraform instance
        uses: actions/cache@v4.3.0
        id: cache-terraform-instance
        env:
          cache-name: cache-terraform-instance
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ${{ github.workspace }}/infra/core/.terraform
            ${{ github.workspace }}/infra/instance/.terraform
          key: ${{ runner.os }}-terraform-${{ env.cache-name }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.cache-name }}-
            ${{ runner.os }}-terraform-
      - name: Fetch core configurations
        id: core
        working-directory: infra/core
        run: |
          # Initialize Terraform
          set -euo pipefail
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ secrets.VNET_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=tfstatenrpeach${{ inputs.environment }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="use_oidc=true"
          terraform validate

          echo "database_host=$(terraform output -raw database_host)" >> $GITHUB_OUTPUT
          echo "database_password=$(terraform output -raw database_master_password)" >> $GITHUB_OUTPUT
      - name: Terraform init
        working-directory: infra/instance
        run: |
          # Initialize Terraform
          set -euo pipefail
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ secrets.VNET_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=tfstatenrpeach${{ inputs.environment }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -backend-config="use_oidc=true" \
            -backend-config="key=${{ steps.instance.outputs.key }}"
      - name: Terraform validate
        working-directory: infra/instance
        run: terraform validate
      - name: Terraform ${{ inputs.command }}
        id: result
        working-directory: infra/instance
        env:
          TF_VAR_api_image: ${{ github.repository }}:${{ inputs.tag }}
          TF_VAR_app_env: ${{ inputs.environment }}
          TF_VAR_app_name: nr-peach
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_common_tags: >-
            {"app_name":"peach","environment":"${{ inputs.environment }}","instance":"${{ steps.instance.outputs.instance }}","repo_name":"nr-peach","managed_by":"terraform"}
          TF_VAR_database_admin_password: ${{ steps.core.outputs.database_password }}
          TF_VAR_database_host: ${{ steps.core.outputs.database_host }}
          TF_VAR_enable_cloudbeaver: 'true'
          TF_VAR_enable_force_migration: ${{ steps.instance.outputs.force_migration }}
          TF_VAR_instance_name: ${{ steps.instance.outputs.instance }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_vnet_address_space: ${{ secrets.VNET_ADDRESS_SPACE }}
          TF_VAR_vnet_name: ${{ secrets.VNET_NAME }}
          TF_VAR_vnet_resource_group_name: ${{ secrets.VNET_RESOURCE_GROUP_NAME }}
        run: |
          # Run the requested Terraform command
          set -euo pipefail
          args="-input=false"
          if [[ "${{ inputs.command }}" == "apply" || "${{ inputs.command }}" == "destroy" ]]; then
            args="$args -auto-approve"
          fi
          terraform ${{ inputs.command }} $args

          if [[ "${{ inputs.command }}" == "apply" ]]; then
            echo "api_app_service_url=$(terraform output -raw api_app_service_url)" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ inputs.command }}" == "destroy" ]]; then
            az storage blob delete --account-name tfstatenrpeach${{ inputs.environment }} --container-name tfstate --name ${{ steps.instance.outputs.key }}
          fi
